// Copyright 2021 Richard Easterling
// SPDX-License-Identifier: Apache-2.0

import 'package:bip32_ed25519/api.dart';
import '../../cardano_wallet_sdk.dart';
import '../crypto/shelley_key_derivation.dart';

///
/// Shelley address generator for a fixed account index (defualting to zero).
/// Given a extended private key at the account level
/// (i.e. m/1852'/1815'/accountIndex), spend (external), change (internal),
/// staking (reward) and enterprise keys and addresses are generated by
/// appending a role and index segments to the CIP1852 path.
///
/// Cardano CIP1852 adoption of BIP32 path:
///     m / 1852' / 1815' / account' / role / index
///
class Account {
  final ShelleyKeyDerivation derivation;
  final NetworkId network;
  final int accountIndex;
  final Bip32SigningKey
      accountSigningKey; //Pvt key at account level m/1852'/1815'/x'
  final DerivationChain accountPath;
  late final Bip32VerifyKey publicStakeKey;

  Account({
    required this.accountSigningKey,
    this.network = NetworkId.mainnet,
    this.accountIndex = 0,
  })  : accountPath = const DerivationChain(
          key: 'm',
          segments: [
            // _cip1852,
            // _cip1815,
            // Segment(index: accountIndex, harden: true)
          ],
        ),
        derivation = ShelleyKeyDerivation(accountSigningKey) {
    publicStakeKey = derivation
        .fromChain(accountPath.append2(_stakeRole, _zeroSoft))
        .publicKey as Bip32VerifyKey;
  }

  Bip32SigningKey basePrivateKey({int index = 0}) => derivation
          .fromChain(accountPath.append2(_spendRole, Segment(index: index)))
      as Bip32SigningKey;
  Bip32SigningKey changePrivateKey({int index = 0}) => derivation
          .fromChain(accountPath.append2(_changeRole, Segment(index: index)))
      as Bip32SigningKey;
  Bip32SigningKey get stakePrivateKey =>
      derivation.fromChain(accountPath.append2(_stakeRole, _zeroSoft))
          as Bip32SigningKey;

  ShelleyAddress baseAddress({int index = 0}) => ShelleyAddress.toBaseAddress(
      spend: basePrivateKey(index: index).verifyKey,
      stake: publicStakeKey,
      networkId: network);
  ShelleyAddress changeAddress({int index = 0}) => ShelleyAddress.toBaseAddress(
      spend: changePrivateKey(index: index).verifyKey,
      stake: publicStakeKey,
      networkId: network);
  ShelleyAddress enterpriseAddress({int index = 0}) =>
      ShelleyAddress.enterpriseAddress(
          spend: changePrivateKey(index: index).verifyKey, networkId: network);
  ShelleyAddress get stakeAddress =>
      ShelleyAddress.toRewardAddress(spend: publicStakeKey, networkId: network);

  static const _cip1852 = Segment(index: 1852, harden: true);
  static const _cip1815 = Segment(index: 1815, harden: true);
  static const _spendRole = Segment(index: 0); //external
  static const _changeRole = Segment(index: 1); //internal
  static const _stakeRole = Segment(index: 2); //reward
  static const _zeroSoft = Segment(index: 0); //generic zero index
}
